{"version":3,"sources":["components/Layout/Layout.tsx","routes/NotFoundPage.tsx","components/RecipeCard/RecipeCard.tsx","components/RecipeList/RecipeList.tsx","utils/globals.ts","routes/Homepage.tsx","utils/firebase/init.js","components/ReviewItem/ReviewItem.tsx","components/ReviewList/ReviewList.tsx","routes/RecipeDetailsPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Layout","children","AppBar","position","Toolbar","IconButton","to","process","className","Typography","variant","Container","maxWidth","Box","py","NotFoundPage","display","flexDirection","justifyContent","alignItems","pt","alt","src","shortenString","str","maxLen","separator","length","substr","lastIndexOf","RecipeCard","recipe","slug","Card","CardContent","name","source","RecipeList","items","List","map","TACO_API_BASE","Homepage","React","useState","setItem","useEffect","fetch","then","response","json","a","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","ReviewItem","review","TableRow","TableCell","commenterName","Rating","value","stars","readOnly","text","ReviewsList","recipeName","onReviewSave","reviews","setReviews","reviewsTable","database","ref","orderByChild","equalTo","once","data","forEach","childNode","row","val","unshift","TableContainer","Table","TableHead","TableBody","key","ItemDetailsPage","match","params","recipeDetails","setItemDetails","updateReview","updateName","updateStars","saveReview","useCallback","push","commenter_name","recipe_name","style","paddingTop","onChange","_event","newStars","TextField","placeholder","marginRight","width","event","target","fullWidth","multiline","Button","color","maxHeight","onClick","App","initializeFirebase","basename","exact","path","component","RecipeDetailsPage","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef589749.chunk.js","sourcesContent":["import React from \"react\";\nimport \"typeface-roboto\";\n\nimport {\n  Container,\n  AppBar,\n  Typography,\n  Toolbar,\n  Box,\n  IconButton\n} from \"@material-ui/core\";\n\nimport \"./Layout.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Layout: React.FC = ({ children }) => (\n  <>\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton>\n          <Link to={`${process.env.PUBLIC_URL}/`} className=\"title\">\n            <Typography variant=\"h6\">Home</Typography>\n          </Link>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n    <Container maxWidth=\"lg\">\n      <Box py={4}>{children}</Box>\n    </Container>\n  </>\n);\n\nexport default Layout;\n","import React from \"react\";\nimport \"typeface-roboto\";\nimport { Typography, Box } from \"@material-ui/core\";\n\nimport Layout from \"../components/Layout/Layout\";\n\nconst NotFoundPage: React.FC = () => {\n  return (\n    <Layout>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        pt={9}\n      >\n        <Typography variant=\"h3\">AWKO TACO</Typography>\n        <Typography variant=\"h6\">Looks like this page doesn't exist</Typography>\n        <img\n          alt=\"dancing-taco\"\n          src=\"https://media1.tenor.com/images/e051d1974d1319a134223480614ffbc8/tenor.gif?itemid=10576778\"\n        />\n      </Box>\n    </Layout>\n  );\n};\n\nexport default NotFoundPage;\n","import React from \"react\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport \"./RecipeCard.css\";\nimport { Link } from \"react-router-dom\";\nimport { Recipe } from \"../../utils/types\";\n\nconst shortenString = (str: string, maxLen: number, separator = \" \") => {\n  if (str.length <= maxLen) return str;\n  return str.substr(0, str.lastIndexOf(separator, maxLen));\n};\n\nconst RecipeCard: React.FC<{ recipe: Recipe }> = ({ recipe }) => (\n  <Link\n    to={`${process.env.PUBLIC_URL}/${recipe.slug}`}\n    className=\"recipe-card-link-wrapper\"\n  >\n    <Card className=\"recipe-card\">\n      <CardContent>\n        <h2>{recipe.name}</h2>\n        {recipe.recipe && (\n          <ReactMarkdown source={`${shortenString(recipe.recipe, 200)}...`} />\n        )}\n      </CardContent>\n    </Card>\n  </Link>\n);\n\nexport default RecipeCard;\n","import React from \"react\";\nimport { List } from \"@material-ui/core\";\n\nimport \"./RecipeList.css\";\nimport RecipeCard from \"../RecipeCard/RecipeCard\";\nimport { Recipe } from \"../../utils/types\";\n\nconst RecipeList: React.FC<{ items: Array<Recipe> }> = ({ items }) => {\n  return (\n    <List className=\"items-list\">\n      {items.map(recipe => (\n        <RecipeCard recipe={recipe} />\n      ))}\n    </List>\n  );\n};\n\nexport default RecipeList;\n","export const TACO_API_BASE = \"https://pramodsum.github.io/taco-pundit-api\";\n","import React from \"react\";\nimport \"typeface-roboto\";\n\nimport Layout from \"../components/Layout/Layout\";\nimport RecipeList from \"../components/RecipeList/RecipeList\";\nimport { Recipe } from \"../utils/types\";\n\nimport { TACO_API_BASE } from \"../utils/globals\";\n\nconst Homepage: React.FC = () => {\n  const [items, setItem] = React.useState<Array<Recipe>>([]);\n\n  React.useEffect(() => {\n    fetch(`${TACO_API_BASE}/toppings`)\n      .then(response => response.json())\n      .then(setItem);\n  }, []);\n\n  return (\n    <Layout>\n      <RecipeList items={items} />\n    </Layout>\n  );\n};\n\nexport default Homepage;\n","import * as firebase from \"firebase\";\n\nexport default async function initializeFirebase() {\n  const firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n  };\n\n  await firebase.initializeApp(firebaseConfig);\n}\n","import React from \"react\";\nimport { TableRow, TableCell } from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\n\nimport { Review } from \"../../utils/types\";\nimport \"./ReviewItem.css\";\n\nconst ReviewItem: React.FC<Review> = review => (\n  <TableRow>\n    <TableCell className=\"review-recipe-cell\">{review.commenterName}</TableCell>\n    <TableCell className=\"review-recipe-cell\">\n      <Rating name=\"read-only\" value={review.stars} readOnly />\n    </TableCell>\n    <TableCell className=\"review-recipe-cell\">{review.text}</TableCell>\n  </TableRow>\n);\n\nexport default ReviewItem;\n","import React from \"react\";\nimport {\n  Box,\n  Typography,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody\n} from \"@material-ui/core\";\nimport firebase from \"firebase/app\";\n\nimport { Review } from \"../../utils/types\";\nimport ReviewItem from \"../ReviewItem/ReviewItem\";\nimport \"./ReviewList.css\";\n\ninterface IProps {\n  recipeName: string;\n  onReviewSave: (\n    commenterName: string,\n    stars: number,\n    review: string\n  ) => Promise<firebase.database.Reference>;\n}\n\nconst ReviewsList: React.FC<IProps> = ({ recipeName, onReviewSave }) => {\n  const [reviews, setReviews] = React.useState<Array<Review>>([]);\n  const reviewsTable: firebase.database.Reference = firebase\n    .database()\n    .ref(\"reviews\");\n\n  React.useEffect(() => {\n    if (!recipeName) return;\n\n    let reviews: Array<Review> = [];\n    reviewsTable\n      .orderByChild(\"recipe_name\")\n      .equalTo(recipeName)\n      .once(\"value\")\n      .then(data => {\n        data.forEach(childNode => {\n          const row = childNode.val();\n          const review: Review = {\n            recipeName: row[\"recipe_name\"],\n            commenterName: row[\"commenter_name\"],\n            text: row[\"text\"],\n            stars: row[\"stars\"]\n          };\n          reviews.unshift(review);\n        });\n\n        setReviews(reviews);\n      });\n  }, [reviewsTable, recipeName, onReviewSave]);\n\n  return (\n    <Box className=\"review-list-wrapper\">\n      <Typography variant=\"h6\">Reviews</Typography>\n      <TableContainer>\n        <Table>\n          <colgroup>\n            <col className=\"review-list-col-20\" />\n            <col className=\"review-list-col-20\" />\n            <col className=\"review-list-col-60\" />\n          </colgroup>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Stars</TableCell>\n              <TableCell>Review</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {reviews.map((review: Review) => (\n              <ReviewItem key={review.commenterName} {...review} />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n};\n\nexport default ReviewsList;\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport ReactMarkdown from \"react-markdown\";\nimport { TextField, Box, Typography, Button } from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport firebase from \"firebase/app\";\n\nimport ReviewList from \"../components/ReviewList/ReviewList\";\nimport Layout from \"../components/Layout/Layout\";\nimport { TACO_API_BASE } from \"../utils/globals\";\nimport { RouteParams, RecipeDetails } from \"../utils/types\";\n\nconst ItemDetailsPage: React.FC<RouteComponentProps> = ({ match }) => {\n  const { slug } = match.params as RouteParams;\n  const [recipeDetails, setItemDetails] = React.useState<RecipeDetails>();\n  const [review, updateReview] = React.useState<string>();\n  const [name, updateName] = React.useState<string>();\n  const [stars, updateStars] = React.useState<number>(0);\n  const reviewsTable: firebase.database.Reference = firebase\n    .database()\n    .ref(\"reviews\");\n\n  React.useEffect(() => {\n    fetch(`${TACO_API_BASE}/toppings/${slug}.json`)\n      .then(response => response.json())\n      .then(setItemDetails);\n  }, [slug]);\n\n  const saveReview = React.useCallback(\n    (commenterName: string, stars: number, review: string) =>\n      reviewsTable.push({\n        commenter_name: commenterName,\n        stars: stars,\n        text: review,\n        recipe_name: recipeDetails?.name\n      }),\n    [recipeDetails, reviewsTable]\n  );\n\n  return (\n    <Layout>\n      {recipeDetails && (\n        <>\n          <h1>{recipeDetails.name}</h1>\n          <ReactMarkdown source={recipeDetails.recipe} />\n        </>\n      )}\n      <Box style={{ paddingTop: \"20px\" }}>\n        <Typography variant=\"h6\">Leave a review</Typography>\n        <Box display=\"inline\">\n          <Rating\n            name=\"simple-controlled\"\n            value={stars}\n            onChange={(_event, newStars) => {\n              newStars && updateStars(newStars);\n            }}\n          />\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <TextField\n              variant=\"outlined\"\n              placeholder=\"Name\"\n              style={{ marginRight: \"10px\", width: \"30%\" }}\n              value={name}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                updateName(event.target.value)\n              }\n            />\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              multiline\n              placeholder=\"Review this taco Recipe\"\n              style={{ marginRight: \"10px\" }}\n              value={review}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                updateReview(event.target.value)\n              }\n            />\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              style={{ width: \"200px\", maxHeight: \"56px\" }}\n              onClick={() => {\n                updateName(\"\");\n                updateStars(0);\n                updateReview(\"\");\n                if (review) {\n                  saveReview(name || \"Anonymous\", stars, review);\n                }\n              }}\n            >\n              Submit Review\n            </Button>\n          </Box>\n        </Box>\n        {recipeDetails?.name && (\n          <ReviewList\n            recipeName={recipeDetails.name}\n            onReviewSave={saveReview}\n          />\n        )}\n      </Box>\n    </Layout>\n  );\n};\n\nexport default ItemDetailsPage;\n","import React from \"react\";\nimport \"typeface-roboto\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport NotFoundPage from \"./routes/NotFoundPage\";\nimport Homepage from \"./routes/Homepage\";\nimport initializeFirebase from \"./utils/firebase/init\";\nimport RecipeDetailsPage from \"./routes/RecipeDetailsPage\";\n\nconst App: React.FC = () => {\n  initializeFirebase();\n\n  return (\n    <Router basename=\"/tacopundit\">\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n        <Route path=\"/:slug\" component={RecipeDetailsPage} />\n        <Route path=\"*\" component={NotFoundPage} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (\n    process.env.NODE_ENV === \"production\" &&\n    \"serviceWorker\" in navigator &&\n    process.env.PUBLIC_URL\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}