{"version":3,"sources":["components/Layout/Layout.tsx","routes/NotFoundPage.tsx","components/ToppingCard/ToppingCard.tsx","components/ToppingsList/ToppingsList.tsx","utils/globals.ts","routes/Homepage.tsx","routes/ToppingDetailsPage.tsx","utils/firebase/init.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Layout","children","AppBar","position","Toolbar","IconButton","to","className","Typography","variant","Container","maxWidth","Box","py","NotFoundPage","display","flexDirection","justifyContent","alignItems","pt","alt","src","shortenString","str","maxLen","separator","length","substr","lastIndexOf","ToppingCard","topping","slug","Card","CardContent","name","source","recipe","ToppingsList","toppings","List","map","TACO_API_BASE","Homepage","React","useState","setToppings","useEffect","fetch","then","response","json","ToppingDetailsPage","match","params","toppingDetails","setToppingDetails","review","updateReview","TextField","fullWidth","multiline","placeholder","style","marginRight","value","onChange","event","target","Button","color","width","maxHeight","onClick","window","alert","a","firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","firebase","App","initializeFirebase","basename","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16d3fa46.chunk.js","sourcesContent":["import React from \"react\";\nimport \"typeface-roboto\";\n\nimport {\n  Container,\n  AppBar,\n  Typography,\n  Toolbar,\n  Box,\n  IconButton\n} from \"@material-ui/core\";\n\nimport \"./Layout.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Layout: React.FC = ({ children }) => (\n  <>\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton>\n          <Link to=\"/\" className=\"title\">\n            <Typography variant=\"h6\">Home</Typography>\n          </Link>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n    <Container maxWidth=\"lg\">\n      <Box py={4}>{children}</Box>\n    </Container>\n  </>\n);\n\nexport default Layout;\n","import React from \"react\";\nimport \"typeface-roboto\";\nimport { Typography, Box } from \"@material-ui/core\";\n\nimport Layout from \"../components/Layout/Layout\";\n\nconst NotFoundPage: React.FC = () => {\n  return (\n    <Layout>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        pt={9}\n      >\n        <Typography variant=\"h3\">AWKO TACO</Typography>\n        <Typography variant=\"h6\">Looks like this page doesn't exist</Typography>\n        <img\n          alt=\"dancing-taco\"\n          src=\"https://media1.tenor.com/images/e051d1974d1319a134223480614ffbc8/tenor.gif?itemid=10576778\"\n        />\n      </Box>\n    </Layout>\n  );\n};\n\nexport default NotFoundPage;\n","import React from \"react\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport \"./ToppingCard.css\";\nimport { Link } from \"react-router-dom\";\n\nexport type Topping = {\n  name: string;\n  slug: string;\n  recipe: string;\n  url: string;\n  uuid: string;\n};\n\nconst shortenString = (str: string, maxLen: number, separator = \" \") => {\n  if (str.length <= maxLen) return str;\n  return str.substr(0, str.lastIndexOf(separator, maxLen));\n};\n\nconst ToppingCard: React.FC<{ topping: Topping }> = ({ topping }) => (\n  <Link to={`/toppings/${topping.slug}`} className=\"topping-card-link-wrapper\">\n    <Card className=\"topping-card\">\n      <CardContent>\n        <h2>{topping.name}</h2>\n        <ReactMarkdown source={`${shortenString(topping.recipe, 200)}...`} />\n      </CardContent>\n    </Card>\n  </Link>\n);\n\nexport default ToppingCard;\n","import React from \"react\";\n\nimport \"./ToppingsList.css\";\nimport ToppingCard, { Topping } from \"../ToppingCard/ToppingCard\";\nimport { List } from \"@material-ui/core\";\n\nconst ToppingsList: React.FC<{ toppings: Array<Topping> }> = ({ toppings }) => (\n  <List className=\"toppings-list\">\n    {toppings.map(topping => (\n      <ToppingCard topping={topping} />\n    ))}\n  </List>\n);\n//<pre>{JSON.stringify(toppings, null, 2)}</pre>;\n\nexport default ToppingsList;\n","export const TACO_API_BASE = \"https://pramodsum.github.io/taco-pundit-api\";\n","import React from \"react\";\nimport \"typeface-roboto\";\nimport { Typography } from \"@material-ui/core\";\n\nimport Layout from \"../components/Layout/Layout\";\nimport ToppingsList from \"../components/ToppingsList/ToppingsList\";\nimport { Topping } from \"../components/ToppingCard/ToppingCard\";\n\nimport { TACO_API_BASE } from \"../utils/globals\";\n\nconst Homepage: React.FC = () => {\n  const [toppings, setToppings] = React.useState<Array<Topping>>([]);\n\n  React.useEffect(() => {\n    fetch(`${TACO_API_BASE}/toppings`)\n      .then(response => response.json())\n      .then(setToppings);\n  }, []);\n\n  return (\n    <Layout>\n      <Typography variant=\"h3\">Taco Toppings</Typography>\n      <ToppingsList toppings={toppings} />\n    </Layout>\n  );\n};\n\nexport default Homepage;\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport ReactMarkdown from \"react-markdown\";\nimport { TextField, Box, Typography, Button } from \"@material-ui/core\";\n\nimport Layout from \"../components/Layout/Layout\";\nimport { TACO_API_BASE } from \"../utils/globals\";\n\ntype ToppingDetails = {\n  name: string;\n  slug: string;\n  recipe: string;\n  url: string;\n};\n\ntype RouteParams = {\n  slug: string;\n};\n\nconst ToppingDetailsPage: React.FC<RouteComponentProps> = ({ match }) => {\n  const { slug } = match.params as RouteParams;\n  const [toppingDetails, setToppingDetails] = React.useState<ToppingDetails>();\n\n  React.useEffect(() => {\n    fetch(`${TACO_API_BASE}/toppings/${slug}.json`)\n      .then(response => response.json())\n      .then(setToppingDetails);\n  }, [slug]);\n\n  const [review, updateReview] = React.useState<string>();\n\n  return (\n    <Layout>\n      {toppingDetails && (\n        <>\n          <h1>{toppingDetails.name}</h1>\n          <ReactMarkdown source={toppingDetails.recipe} />\n        </>\n      )}\n      <Box>\n        <Typography variant=\"h6\">Reviews</Typography>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            multiline\n            placeholder=\"Review this taco topping\"\n            style={{ marginRight: \"10px\" }}\n            value={review}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n              updateReview(event.target.value)\n            }\n          />\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            style={{ width: \"200px\", maxHeight: \"56px\" }}\n            onClick={() => {\n              updateReview(\"\");\n              window.alert(`New review: \\n${review}`);\n            }}\n          >\n            Submit Review\n          </Button>\n        </Box>\n      </Box>\n    </Layout>\n  );\n};\n\nexport default ToppingDetailsPage;\n","import * as firebase from \"firebase\";\n\nexport default async function initializeFirebase() {\n  const firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n  };\n\n  await firebase.initializeApp(firebaseConfig);\n}\n","import React from \"react\";\nimport \"typeface-roboto\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport NotFoundPage from \"./routes/NotFoundPage\";\nimport Homepage from \"./routes/Homepage\";\nimport ToppingDetailsPage from \"./routes/ToppingDetailsPage\";\n\nimport initializeFirebase from \"./utils/firebase/init\";\n\nconst App: React.FC = () => {\n  initializeFirebase();\n\n  return (\n    <Router basename=\"/tacopundit\">\n      <Switch>\n        <Redirect exact path=\"/\" to=\"/toppings\" />\n        <Route exact path=\"/toppings\" component={Homepage} />\n        <Route path={`/toppings/:slug`} component={ToppingDetailsPage} />\n        <Route path=\"*\" component={NotFoundPage} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (\n    process.env.NODE_ENV === \"production\" &&\n    \"serviceWorker\" in navigator &&\n    process.env.PUBLIC_URL\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}